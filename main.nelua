require 'raylib'
require 'perna-lib.components'
require 'perna-lib.systems'
require 'rotor'
require 'vector'

}

end

-- game
local Game = @record{
   perna: record{
      id: GenerationalIndex
   },
   tilemap: record{
      id: GenerationalIndex
   },
   tileset: TileSet
}

local function load_game_tileset(game: Game*)
   game.tileset = {
      tiles = {
         {sprite = {texture = Raylib.LoadTexture("resources/tiles/dirt.png") }, id = 0},
         {sprite = {texture = Raylib.LoadTexture("resources/tiles/water.png")}, id = 1}
      },
      tile_resolution = 64
   }
end

local function create_perna(game: Game*, untracked_ids: pointer(vector(GenerationalIndex)))
   local perna_entity_id, perna_entity = storages.entity:new_entry(Entity.new())

   local position_id, position = storages.position:new_entry({0, 0})
   perna_entity:associate(position_id, masks.position)

   local velocity_id, velocity = storages.velocity:new_entry({{0, 0}, 100})
   perna_entity:associate(velocity_id, masks.velocity)

   local sprite_id, sprite = storages.sprite:new_entry({texture = Raylib.LoadTexture("resources/sprites/perna/protosprite.png")})
   perna_entity:associate(sprite_id, masks.sprite)

   local controls_id, controls = storages.controls:new_entry({KeyboardKey.RIGHT, KeyboardKey.UP, KeyboardKey.LEFT, KeyboardKey.DOWN})
   perna_entity:associate(controls_id, masks.controls)

   untracked_ids:push(perna_entity_id)
   game.perna.id = perna_entity_id
end

local function create_tilemap(game: Game*, untracked_ids: pointer(vector(GenerationalIndex)))
   local tm_entity_id, tm_entity = storages.entity:new_entry(Entity.new())

   local tilemap_id, tilemap = storages.tilemap:new_entry({
      &game.tileset,
      {
         {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      }
   })

   tm_entity:associate(tilemap_id, masks.tilemap)

   untracked_ids:push(tm_entity_id)
   game.tilemap.id = tm_entity_id
end

local game: Game;
local untracked_ids: vector(GenerationalIndex)

local function setup()
   load_game_tileset(game)

   create_perna(game, &untracked_ids)
   create_tilemap(game, &untracked_ids)

   velocity_system.system_data:update(storages.entity, untracked_ids)
   perna_controls_system.system_data:update(storages.entity, untracked_ids)
   tilemap_drawing_system.system_data:update(storages.entity, untracked_ids)
   sprite_drawing_system.system_data:update(storages.entity, untracked_ids)
end

local function update(dt: number)
   perna_controls_system_run(perna_controls_system.system_data, storages.controls, storages.velocity)
   velocity_system_run(velocity_system.system_data, storages.velocity, storages.position, dt)
end

local function draw()
   Raylib.BeginDrawing()
      Raylib.ClearBackground(RaylibColors.White)

      tilemap_drawing_system_run(tilemap_drawing_system.system_data, storages.tilemap)
      sprite_drawing_system_run(sprite_drawing_system.system_data, storages.position, storages.sprite)
   Raylib.EndDrawing()
end


local SCREEN_WIDTH: integer <comptime> = 800
local SCREEN_HEIGHT: integer <comptime> = 600

Raylib.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "The terrible game of hairy leg!")
Raylib.SetTargetFPS(60)

setup()

while not Raylib.WindowShouldClose() do
   update(Raylib.GetFrameTime())
   draw()
end
Raylib.CloseWindow()
