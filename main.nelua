require 'raylib'
require 'perna-lib.entities'
require 'perna-lib.components'
require 'perna-lib.systems'
require 'rotor'
require 'vector'

-- game records and subroutines [
local GameSystems = @record{
   velocity_system: VelocitySystem,
   tilemap_drawing_system: TilemapDrawingSystem,
   sprite_drawing_system: SpriteDrawingSystem,
   perna_controller_system: PernaControllerSystem
}

function GameSystems:update_all(entity_storage: Storage(Entity)*, untracked_ids: vector(GenerationalIndex)*)
   self.velocity_system.system.system_data:update(storages.entity, untracked_ids)
   self.perna_controller_system.system.system_data:update(storages.entity, untracked_ids)
   self.tilemap_drawing_system.system.system_data:update(storages.entity, untracked_ids)
   self.sprite_drawing_system.system.system_data:update(storages.entity, untracked_ids)
end

local Game = @record{
   perna: record{
      id: GenerationalIndex
   },
   tilemap: record{
      id: GenerationalIndex
   },
   tileset: TileSet,
   game_systems: GameSystems
}

local function load_game_tileset(game: Game*)
   game.tileset = {
      tiles = {
         {sprite = {texture = Raylib.LoadTexture("resources/tiles/dirt.png") }, id = 0},
         {sprite = {texture = Raylib.LoadTexture("resources/tiles/water.png")}, id = 1}
      },
      tile_resolution = 64
   }
end

local function create_perna(game: Game*, untracked_ids: vector(GenerationalIndex)*): PernaEntity
   local new_perna: PernaEntity;
   new_perna:create(
      storages.entity,
      storages.position, {0, 0},
      storages.velocity, {{0, 0}, 100},
      storages.sprite  , {texture = Raylib.LoadTexture('resources/sprites/perna/protosprite.png')},
      storages.controls, {KeyboardKey.RIGHT, KeyboardKey.UP, KeyboardKey.LEFT, KeyboardKey.DOWN},
      untracked_ids
   )

   game.perna = {
      id = new_perna.entity_id
   }

   return new_perna
end

local function create_tilemap(game: Game*, untracked_ids: pointer(vector(GenerationalIndex)))
   local tm_entity_id, tm_entity = storages.entity:new_entry(Entity.new())

   local tilemap_id, tilemap = storages.tilemap:new_entry({
      &game.tileset,
      {
         {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      }
   })

   tm_entity:associate(tilemap_id, masks.tilemap)

   untracked_ids:push(tm_entity_id)
   game.tilemap.id = tm_entity_id
end

-- game records and subroutines ]

-- game [
local SCREEN_WIDTH: integer <comptime> = 1280
local SCREEN_HEIGHT: integer <comptime> = 720

local game: Game;

game.game_systems = {
   VelocitySystem.new(),
   TilemapDrawingSystem.new(),
   SpriteDrawingSystem.new(),
   PernaControllerSystem.new()
}

local untracked_ids: vector(GenerationalIndex)

local function setup()
   load_game_tileset(game)

   create_perna(game, &untracked_ids)
   create_tilemap(game, &untracked_ids)

   game.game_systems:update_all(storages.entity, untracked_ids)
end

local function update()
   local dt = Raylib.GetFrameTime()
   game.game_systems.perna_controller_system:run(storages.controls, storages.velocity)
   game.game_systems.velocity_system:run(storages.velocity, storages.position, dt)
end

local function draw()
   Raylib.BeginDrawing()
      Raylib.ClearBackground(RaylibColors.White)

      game.game_systems.tilemap_drawing_system:run(storages.tilemap)
      game.game_systems.sprite_drawing_system:run(storages.position, storages.sprite)
   Raylib.EndDrawing()
end

Raylib.SetConfigFlags(ConfigFlag.WINDOW_RESIZABLE)
Raylib.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "The terrible game of hairy leg!")
Raylib.SetTargetFPS(60)

setup()

while not Raylib.WindowShouldClose() do
   update()
   draw()
end

-- TODO: implement destructors, especially to UnloadTexture_s
Raylib.CloseWindow()
-- game ]
